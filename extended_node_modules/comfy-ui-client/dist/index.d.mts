import WebSocket from 'ws';

interface NodeInfo {
    class_type: string;
    inputs: {
        [key: string]: any;
    };
}
interface Prompt {
    [nodeId: string]: {
        inputs: Record<string, any>;
        class_type: string;
    };
}
interface ComfyUIError {
    type: string;
    message: string;
    details: string;
    extra_info: any;
}
interface QueuePromptResult {
    prompt_id: string;
    number: number;
    node_errors: Record<string, ComfyUIError>;
}
interface UploadImageResult {
    name: string;
    subfolder: string;
    type: string;
}
interface PromptHistory {
    prompt: any[];
    outputs: Record<string, any>;
}
interface HistoryResult {
    [clientId: string]: PromptHistory;
}
interface OutputImage {
    filename: string;
    subfolder: string;
    type: string;
}
interface ImageContainer {
    blob: Blob;
    image: OutputImage;
}
interface ImagesResponse {
    [nodeId: string]: ImageContainer[];
}
interface ResponseError {
    error: string | ComfyUIError;
    node_errors: Record<string, ComfyUIError>;
}

declare class ComfyUIClient {
    serverAddress: string;
    clientId: string;
    protected ws?: WebSocket;
    constructor(serverAddress: string, clientId: string);
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    queuePrompt(prompt: Prompt): Promise<QueuePromptResult>;
    uploadImage(image: Buffer, filename: string): Promise<UploadImageResult>;
    getImage(filename: string, subfolder: string, type: string): Promise<Blob>;
    getHistory(promptId: string): Promise<HistoryResult>;
    saveImages(response: ImagesResponse, outputDir: string): Promise<void>;
    getImages(prompt: Prompt): Promise<ImagesResponse>;
}

export { ComfyUIClient, ComfyUIError, HistoryResult, ImageContainer, ImagesResponse, NodeInfo, OutputImage, Prompt, PromptHistory, QueuePromptResult, ResponseError, UploadImageResult };
